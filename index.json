{
  "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepositoryBase-4.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepositoryBase-4.html",
    "title": "Class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey>",
    "keywords": "Class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey> This class is a base EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey> EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public abstract class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey> : CrudRepositoryBase<TOptions, TModel, TKey>, ICrudRepository<TModel, TKey>, ILinqRepository<TModel>, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<EFCoreRepositoryOptions> where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. TModel The type of associated model. TKey The key type associated with the model. Constructors EFCoreCrudRepositoryBase(TOptions, TContext) This constructor creates a new instance of the EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey> class. Declaration protected EFCoreCrudRepositoryBase(TOptions options, TContext dataContext) Parameters Type Name Description TOptions options The options to use with the repository. TContext dataContext The data-context to use with the repository. Properties DataContext This property contains the data-context associated with the repository. Declaration protected TContext DataContext { get; set; } Property Value Type Description TContext Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepositoryBase-5.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepositoryBase-5.html",
    "title": "Class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2>",
    "keywords": "Class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2> This class is a base EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey1, TKey2> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey1, TKey2> EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey1, TKey2> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public abstract class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2> : CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>, ICrudRepository<TModel, TKey1, TKey2>, ILinqRepository<TModel>, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<EFCoreRepositoryOptions> where TModel : class, IModel<TKey1, TKey2> where TKey1 : new() where TKey2 : new() Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. Constructors EFCoreCrudRepositoryBase(TOptions, TContext) This constructor creates a new instance of the EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2> class. Declaration protected EFCoreCrudRepositoryBase(TOptions options, TContext dataContext) Parameters Type Name Description TOptions options The options to use with the repository. TContext dataContext The data-context to use with the repository. Properties DataContext This property contains the data-context associated with the repository. Declaration protected TContext DataContext { get; set; } Property Value Type Description TContext Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepositoryBase-6.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepositoryBase-6.html",
    "title": "Class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2, TKey3>",
    "keywords": "Class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2, TKey3> This class is a base EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey1, TKey2, TKey3> EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2, TKey3> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public abstract class EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2, TKey3> : CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>, ICrudRepository<TModel, TKey1, TKey2, TKey3>, ILinqRepository<TModel>, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<EFCoreRepositoryOptions> where TModel : class, IModel<TKey1, TKey2, TKey3> where TKey1 : new() where TKey2 : new() where TKey3 : new() Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. TKey3 The key 3 type associated with the model. Constructors EFCoreCrudRepositoryBase(TOptions, TContext) This constructor creates a new instance of the EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2, TKey3> class. Declaration protected EFCoreCrudRepositoryBase(TOptions options, TContext dataContext) Parameters Type Name Description TOptions options The options to use with the repository. TContext dataContext The data-context to use with the repository. Properties DataContext This property contains the data-context associated with the repository. Declaration protected TContext DataContext { get; set; } Property Value Type Description TContext Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.EFCoreRepositoryBase-2.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreRepositoryBase-2.html",
    "title": "Class EFCoreRepositoryBase<TContext, TOptions>",
    "keywords": "Class EFCoreRepositoryBase<TContext, TOptions> This class is a base EFCORE implementation of the CG.Business.Repositories.IRepository interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase EFCoreRepositoryBase<TContext, TOptions> EFCoreRepositoryBase<TContext, TOptions, TModel> Implements CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public abstract class EFCoreRepositoryBase<TContext, TOptions> : RepositoryBase, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<EFCoreRepositoryOptions> Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. Constructors EFCoreRepositoryBase(TOptions, TContext) This constructor creates a new instance of the EFCoreRepositoryBase<TContext, TOptions> class. Declaration protected EFCoreRepositoryBase(TOptions options, TContext dataContext) Parameters Type Name Description TOptions options The options to use with the repository. TContext dataContext The data-context to use with the repository. Properties DataContext This property contains the data-context associated with the repository. Declaration protected TContext DataContext { get; set; } Property Value Type Description TContext Methods Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) Implements CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.EFCoreRepositoryBase-3.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreRepositoryBase-3.html",
    "title": "Class EFCoreRepositoryBase<TContext, TOptions, TModel>",
    "keywords": "Class EFCoreRepositoryBase<TContext, TOptions, TModel> This class is a base EFCORE implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase EFCoreRepositoryBase <TContext, TOptions> EFCoreRepositoryBase<TContext, TOptions, TModel> Implements CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members EFCoreRepositoryBase<TContext, TOptions>.DataContext EFCoreRepositoryBase<TContext, TOptions>.Dispose(Boolean) CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public abstract class EFCoreRepositoryBase<TContext, TOptions, TModel> : EFCoreRepositoryBase<TContext, TOptions>, ILinqRepository<TModel>, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<EFCoreRepositoryOptions> where TModel : class, IModel Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. TModel The model type associated with the repository. Constructors EFCoreRepositoryBase(TOptions, TContext) This constructor creates a new instance of the EFCoreRepositoryBase<TContext, TOptions, TModel> class. Declaration protected EFCoreRepositoryBase(TOptions options, TContext dataContext) Parameters Type Name Description TOptions options The options to use with the repository. TContext dataContext The data-context to use with the repository. Properties DataContext This property contains the data-context associated with the repository. Declaration protected TContext DataContext { get; set; } Property Value Type Description TContext Methods AsQueryable() Declaration public virtual IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.Linq.EFCore.Repositories.EFCoreRepositoryBase<TContext, TOptions>.Dispose(System.Boolean) Implements CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.html": {
    "href": "api/CG.Linq.EFCore.Repositories.html",
    "title": "Namespace CG.Linq.EFCore.Repositories",
    "keywords": "Namespace CG.Linq.EFCore.Repositories Classes EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey> This class is a base EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2> This class is a base EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> interface. EFCoreCrudRepositoryBase<TContext, TOptions, TModel, TKey1, TKey2, TKey3> This class is a base EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. EFCoreRepositoryBase<TContext, TOptions> This class is a base EFCORE implementation of the CG.Business.Repositories.IRepository interface. EFCoreRepositoryBase<TContext, TOptions, TModel> This class is a base EFCORE implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface."
  },
  "api/CG.Linq.EFCore.Repositories.Options.EFCoreRepositoryOptions.html": {
    "href": "api/CG.Linq.EFCore.Repositories.Options.EFCoreRepositoryOptions.html",
    "title": "Class EFCoreRepositoryOptions",
    "keywords": "Class EFCoreRepositoryOptions This class contains configuration settings for an EFCore repository. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase CG.Business.Repositories.Options.RepositoryOptions CG.Business.Repositories.Options.LinqRepositoryOptions EFCoreRepositoryOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories.Options Assembly : CG.Linq.EFCore.dll Syntax public class EFCoreRepositoryOptions : LinqRepositoryOptions, IValidatableObject Properties ApplyMigrations This property indicates whether migrations should be applied, at startup (or not). Declaration public bool ApplyMigrations { get; set; } Property Value Type Description System.Boolean DropDatabase This property indicates whether the database should be dropped, if it already exists (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool DropDatabase { get; set; } Property Value Type Description System.Boolean EnsureCreated This property indicates whether the database should be created, if needed, at startup (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool EnsureCreated { get; set; } Property Value Type Description System.Boolean SeedDatabase This property indicates whether the database should be seeded with data, if needed, at startup (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool SeedDatabase { get; set; } Property Value Type Description System.Boolean Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Linq.EFCore.Repositories.Options.html": {
    "href": "api/CG.Linq.EFCore.Repositories.Options.html",
    "title": "Namespace CG.Linq.EFCore.Repositories.Options",
    "keywords": "Namespace CG.Linq.EFCore.Repositories.Options Classes EFCoreRepositoryOptions This class contains configuration settings for an EFCore repository."
  },
  "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions",
    "keywords": "Class ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder type. Inheritance System.Object ApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Linq.EFCore.dll Syntax public static class ApplicationBuilderExtensions Methods UseEFCoreStartup<TContext, TOptions>(IApplicationBuilder, IWebHostEnvironment, SeedAction<TContext>) This method performs any startup logic required by EFCore, such as creating the underlying database (if needed), applying migrations, or adding seed data to a blank database. Declaration public static IApplicationBuilder UseEFCoreStartup<TContext, TOptions>(this IApplicationBuilder applicationBuilder, IWebHostEnvironment hostEnvironment, SeedAction<TContext> seedDelegate) where TContext : DbContext where TOptions : EFCoreRepositoryOptions Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostEnvironment The hosting environment to use for the operation. SeedAction <TContext> seedDelegate A delegate for seeding the database with startup data. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder The value of the applicationBuilder parameter, for chaining calls together. Type Parameters Name Description TContext The type of assciated data-context TOptions The type of associated options. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing."
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder type. Delegates SeedAction<TContext> This delegate type represents a callback to seed a database."
  },
  "api/Microsoft.AspNetCore.Builder.SeedAction-1.html": {
    "href": "api/Microsoft.AspNetCore.Builder.SeedAction-1.html",
    "title": "Delegate SeedAction<TContext>",
    "keywords": "Delegate SeedAction<TContext> This delegate type represents a callback to seed a database. Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Linq.EFCore.dll Syntax public delegate void SeedAction<in TContext>(TContext dataContext, bool wasDropped, bool wasCreated, bool wasMigrated) where TContext : DbContext; Parameters Type Name Description TContext dataContext The data-context to use for the operation. System.Boolean wasDropped Indicates whether the data-context was recently dropped. System.Boolean wasCreated Indicates whether the data-context was recently created. System.Boolean wasMigrated Indicates whether the data-context was recently migrated. Type Parameters Name Description TContext The type of associated data-context."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Linq.EFCore.dll Syntax public static class ServiceCollectionExtensions Methods AddEFCore<TOptions>(IServiceCollection, IConfiguration) This method loads and registers EFCore specific repository options. Declaration public static IServiceCollection AddEFCore<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration) where TOptions : EFCoreRepositoryOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated repository options."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Linq.EFCore.dll contains Entity Framework Core extensions used by other CodeGator packages."
  }
}