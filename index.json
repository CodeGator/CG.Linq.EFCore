{
  "api/CG.Linq.EFCore.DbContextFactory-1.html": {
    "href": "api/CG.Linq.EFCore.DbContextFactory-1.html",
    "title": "Class DbContextFactory<TContext>",
    "keywords": "Class DbContextFactory<TContext> This class represents a factory for creating EFCore data-context instances. Inheritance System.Object DbContextFactory<TContext> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore Assembly : CG.Linq.EFCore.dll Syntax public class DbContextFactory<TContext> where TContext : DbContext Type Parameters Name Description TContext The type of associated data-context Remarks The idea, with this class, is to create a factory for making transitory data-context instances, at runtime. The class is a better alternative to passing a raw System.IServiceProvider instance around, or using a service locator pattern. Constructors DbContextFactory(IServiceProvider) This constructor creates a new instance of the DbContextFactory<TContext> type. Declaration public DbContextFactory(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The service provider to use with the factory. Properties ServiceProvider This property contains a reference to a service provider. Declaration protected IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider Methods Create() This method creates a new TContext instance and returns it. Declaration public virtual TContext Create() Returns Type Description TContext A new TContext instance."
  },
  "api/CG.Linq.EFCore.html": {
    "href": "api/CG.Linq.EFCore.html",
    "title": "Namespace CG.Linq.EFCore",
    "keywords": "Namespace CG.Linq.EFCore Classes DbContextFactory<TContext> This class represents a factory for creating EFCore data-context instances."
  },
  "api/CG.Linq.EFCore.Repositories.EFCoreRepositoryBase-2.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreRepositoryBase-2.html",
    "title": "Class EFCoreRepositoryBase<TContext, TOptions>",
    "keywords": "Class EFCoreRepositoryBase<TContext, TOptions> This class is a base EFCORE implementation of the CG.Business.Repositories.IRepository interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase EFCoreRepositoryBase<TContext, TOptions> Implements CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public abstract class EFCoreRepositoryBase<TContext, TOptions> : RepositoryBase, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<EFCoreRepositoryOptions> Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. Constructors EFCoreRepositoryBase(TOptions, DbContextFactory<TContext>) This constructor creates a new instance of the EFCoreRepositoryBase<TContext, TOptions> class. Declaration protected EFCoreRepositoryBase(TOptions options, DbContextFactory<TContext> dbContextFactory) Parameters Type Name Description TOptions options The options to use with the repository. DbContextFactory <TContext> dbContextFactory The data-context factory to use with the repository. Properties Factory This property contains a factory for creating TContext instances. Declaration protected DbContextFactory<TContext> Factory { get; } Property Value Type Description DbContextFactory <TContext> Implements CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.html": {
    "href": "api/CG.Linq.EFCore.Repositories.html",
    "title": "Namespace CG.Linq.EFCore.Repositories",
    "keywords": "Namespace CG.Linq.EFCore.Repositories Classes EFCoreRepositoryBase<TContext, TOptions> This class is a base EFCORE implementation of the CG.Business.Repositories.IRepository interface."
  },
  "api/CG.Linq.EFCore.Repositories.Options.EFCoreRepositoryOptions.html": {
    "href": "api/CG.Linq.EFCore.Repositories.Options.EFCoreRepositoryOptions.html",
    "title": "Class EFCoreRepositoryOptions",
    "keywords": "Class EFCoreRepositoryOptions This class contains configuration settings for an EFCore repository. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase CG.Business.Repositories.Options.RepositoryOptions CG.Business.Repositories.Options.LinqRepositoryOptions EFCoreRepositoryOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories.Options Assembly : CG.Linq.EFCore.dll Syntax public class EFCoreRepositoryOptions : LinqRepositoryOptions, IValidatableObject Properties ApplyMigrations This property indicates whether migrations should be applied, at startup (or not). Declaration public bool ApplyMigrations { get; set; } Property Value Type Description System.Boolean DropDatabase This property indicates whether the database should be dropped, if it already exists (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool DropDatabase { get; set; } Property Value Type Description System.Boolean EnsureCreated This property indicates whether the database should be created, if needed, at startup (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool EnsureCreated { get; set; } Property Value Type Description System.Boolean SeedDatabase This property indicates whether the database should be seeded with data, if needed, at startup (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool SeedDatabase { get; set; } Property Value Type Description System.Boolean Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Linq.EFCore.Repositories.Options.html": {
    "href": "api/CG.Linq.EFCore.Repositories.Options.html",
    "title": "Namespace CG.Linq.EFCore.Repositories.Options",
    "keywords": "Namespace CG.Linq.EFCore.Repositories.Options Classes EFCoreRepositoryOptions This class contains configuration settings for an EFCore repository."
  },
  "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions",
    "keywords": "Class ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder type. Inheritance System.Object ApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Linq.EFCore.dll Syntax public static class ApplicationBuilderExtensions Methods UseEFCore<TContext, TOptions>(IApplicationBuilder, IWebHostEnvironment, SeedAction<TContext>) This method performs any startup logic required by EFCore, such as dropping the underlying database (if needed), or creating the underlying database (if needed), applying any pending migrations, or adding seed data to an otherwise blank database. Declaration public static IApplicationBuilder UseEFCore<TContext, TOptions>(this IApplicationBuilder applicationBuilder, IWebHostEnvironment hostEnvironment, SeedAction<TContext> seedDelegate) where TContext : DbContext where TOptions : EFCoreRepositoryOptions Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostEnvironment The hosting environment to use for the operation. SeedAction <TContext> seedDelegate A delegate for seeding the database with startup data. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder The value of the applicationBuilder parameter, for chaining calls together. Type Parameters Name Description TContext The type of assciated data-context TOptions The type of associated options. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing."
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder type. Delegates SeedAction<TContext> This delegate type represents a callback to seed a database."
  },
  "api/Microsoft.AspNetCore.Builder.SeedAction-1.html": {
    "href": "api/Microsoft.AspNetCore.Builder.SeedAction-1.html",
    "title": "Delegate SeedAction<TContext>",
    "keywords": "Delegate SeedAction<TContext> This delegate type represents a callback to seed a database. Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Linq.EFCore.dll Syntax public delegate void SeedAction<in TContext>(TContext dataContext, bool wasDropped, bool wasCreated, bool wasMigrated) where TContext : DbContext; Parameters Type Name Description TContext dataContext The data-context to use for the operation. System.Boolean wasDropped Indicates whether the data-context was recently dropped. System.Boolean wasCreated Indicates whether the data-context was recently created. System.Boolean wasMigrated Indicates whether the data-context was recently migrated. Type Parameters Name Description TContext The type of associated data-context."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Linq.EFCore.dll Syntax public static class ServiceCollectionExtensions Methods AddEFCore<TOptions>(IServiceCollection, IConfiguration, ServiceLifetime) This method loads and registers EFCore specific repository options. Declaration public static IServiceCollection AddEFCore<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, ServiceLifetime serviceLifetime = ServiceLifetime.Scoped) where TOptions : EFCoreRepositoryOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Microsoft.Extensions.DependencyInjection.ServiceLifetime serviceLifetime The service lifetime to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated repository options. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Linq.EFCore.dll contains Entity Framework Core extensions used by other CodeGator packages."
  }
}