{
  "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepository-4.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreCrudRepository-4.html",
    "title": "Class EFCoreCrudRepository<TContext, TOptions, TModel, TKey>",
    "keywords": "Class EFCoreCrudRepository<TContext, TOptions, TModel, TKey> This class is an EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey> EFCoreCrudRepository<TContext, TOptions, TModel, TKey> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public class EFCoreCrudRepository<TContext, TOptions, TModel, TKey> : CrudRepositoryBase<TOptions, TModel, TKey>, ICrudRepository<TModel, TKey>, ILinqRepository<TModel>, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<LinqRepositoryOptions> where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. TModel The type of associated model. TKey The key type associated with the model. Constructors EFCoreCrudRepository(TOptions, TContext) This constructor creates a new instance of the class. Declaration protected EFCoreCrudRepository(TOptions options, TContext dataContext) Parameters Type Name Description TOptions options The options to use with the repository. TContext dataContext The data-context to use with the repository. Properties DataContext This property contains the data-context associated with the repository. Declaration protected TContext DataContext { get; set; } Property Value Type Description TContext Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.EFCoreRepository-3.html": {
    "href": "api/CG.Linq.EFCore.Repositories.EFCoreRepository-3.html",
    "title": "Class EFCoreRepository<TContext, TOptions, TModel>",
    "keywords": "Class EFCoreRepository<TContext, TOptions, TModel> This class is an EFCORE implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> EFCoreRepository<TContext, TOptions, TModel> Implements CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.EFCore.Repositories Assembly : CG.Linq.EFCore.dll Syntax public class EFCoreRepository<TContext, TOptions, TModel> : LinqRepositoryBase<TOptions, TModel>, ILinqRepository<TModel>, IRepository, IDisposable where TContext : DbContext where TOptions : IOptions<LinqRepositoryOptions> where TModel : class, IModel Type Parameters Name Description TContext The data-context type associated with the repository. TOptions The options type associated with the repository. TModel The model type associated with the repository. Constructors EFCoreRepository(TOptions, TContext) This constructor creates a new instance of the class. Declaration protected EFCoreRepository(TOptions options, TContext dataContext) Parameters Type Name Description TOptions options The options to use with the repository. TContext dataContext The data-context to use with the repository. Properties DataContext This property contains the data-context associated with the repository. Declaration protected TContext DataContext { get; set; } Property Value Type Description TContext Methods AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) Implements CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.EFCore.Repositories.html": {
    "href": "api/CG.Linq.EFCore.Repositories.html",
    "title": "Namespace CG.Linq.EFCore.Repositories",
    "keywords": "Namespace CG.Linq.EFCore.Repositories Classes EFCoreCrudRepository<TContext, TOptions, TModel, TKey> This class is an EFCORE implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. EFCoreRepository<TContext, TOptions, TModel> This class is an EFCORE implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Linq.EFCore.dll contains Entity Framework Core extensions used by other CodeGator packages."
  }
}